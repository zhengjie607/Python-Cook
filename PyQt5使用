Timer：
from PyQt5.QtCore import QTimer
self.timer=QTimer(self)
self.timer.timeout.connect(self.showTime)#时间间隔之后，调用showTime（）方法
self.timer.start(500)#单位是ms，设置时间间隔，并启动
self.timer.stop()

时间：
time=PyQt5.QtCore.QDateTime.currentDateTime()
timeDisplay=time.toString("yyyy-MM-dd hh:mm:ss dddd")

图形编辑界面：
1.保存form.ui
2.命令行输入“pyuic5 form.ui -o form.py”
3.python中， from form import Ui_form
4.新建类:class myform(Ui_form,QWidget),注意：图形界面用的什么，第二个位置就继承什么
            def __init__(self):
                  super(myform,self).__init__()#调用父类的构造函数
                  self.setupUi(self)
        app=PyQt5.QtWidgets.QApplication(sys.argv)
        mywindow=myform()
        mywindow.show()
        app.exec_()
        sys.exit()#括号里可以写退出窗口后执行的内容
 
QFileDialog打开文件对话框
dlg=QtWidgets.QFileDialog()
f=dlg.getOpenFileName(self,'Open File','.','GCode file (*.gcode)')#f[0]是路径,f[1]是文件类型


PyQtGraph使用
from pyqtgraph import GraphicsLayoutWidget#这就是一个Widget控件
class mygraph(GraphicsLayoutWidget):
  def __init__(self):
    super(mygraph,self).__init__()
    self.analyse = self.addPlot(row=1, col=0)#这句话代表增加绘制表格，在整个布局中占第一行
    self.analyse.setLabel("left","Temperature","℃")#设置标签
    self.analyse.setLabel("bottom","Time","s")
    self.analyse.addLegend()#增加图标
    self.analyse.plot([0],pen=(0,128,0),symbolBrush=(0,128,0),  symbol='t', symbolSize=14,name="\\      开始打印")
    #第一个参数是x数据，这里没写，默认从0开始，第二个参数是Y，第三个参数的画笔颜色，第四个是笔刷颜色，第五个是符号形状，第六个是尺寸，第七个是名称，
    名称在clear()函数之后不清空
    self.analyse.clear()
    self.analyse.scene().sigMouseMoved.connect(self.mouseMoved)#绑定鼠标移动的函数
    self.current_temp = self.addPlot(row=2, col=0))#这句话代表增加绘制表格，在整个布局中占第二行
    
QProgressBar 进度条
setMinimum()
setMaximum()
setOrientation()设置方向，Qt.Horizontal和Qt.Vertical
setFormat("%v")#设置显示数字
％p - 被完成的百分比取代
％v - 被当前值替换
％m - 被总step所取代
默认值是”％p％”
setInvertedAppearance(True)，行进方向
最大最小值都设为0，则是繁忙指示


读文件新线程
PyQt5.QtCore import QThread,pyqtSignal
新建一个类，继承QThread
定义一个信号属性sinout=pyqtSignal（int）
需要运行的代码在run()函数中即可
在函数中可以使用sinout.emit()来发送信号

在别的地方使用，先将类初始化
然后绑定sinout.connect()
在需要开启线程的时候，调用start()

使用摄像头
from PyQt5.QtMultimedia import QCamera#摄像头类


from PyQt5.QtMultimediaWidgets import QCameraViewfinder#装摄像头类的Widget
cam=QCamera(self)#摄像头类
camera=QCameraViewfinder(self)#装摄像头的Widget
cam.setViewfinder(camera)
cam.start()
