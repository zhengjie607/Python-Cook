Timer：
from PyQt5.QtCore import QTimer
self.timer=QTimer(self)
self.timer.timeout.connect(self.showTime)#时间间隔之后，调用showTime（）方法
self.timer.start(500)#单位是ms，设置时间间隔，并启动
self.timer.stop()

时间：
time=PyQt5.QtCore.QDateTime.currentDateTime()
timeDisplay=time.toString("yyyy-MM-dd hh:mm:ss dddd")

图形编辑界面：
1.保存form.ui
2.命令行输入“pyuic5 form.ui -o form.py”
3.python中， from form import Ui_form
4.新建类:class myform(Ui_form,QWidget),注意：图形界面用的什么，第二个位置就继承什么
            def __init__(self):
                  super(myform,self).__init__()#调用父类的构造函数
                  self.setupUi(self)
        app=PyQt5.QtWidgets.QApplication(sys.argv)
        mywindow=myform()
        mywindow.show()
        app.exec_()
        sys.exit()#括号里可以写退出窗口后执行的内容
 
QFileDialog打开文件对话框
dlg=QtWidgets.QFileDialog()
f=dlg.getOpenFileName(self,'Open File','.','GCode file (*.gcode)')#f[0]是路径,f[1]是文件类型


PyQtGraph使用
from pyqtgraph import GraphicsLayoutWidget#这就是一个Widget控件
class mygraph(GraphicsLayoutWidget):
  def __init__(self):
    super(mygraph,self).__init__()
    self.analyse = self.addPlot(row=1, col=0)#这句话代表增加绘制表格，在整个布局中占第一行
    self.analyse.setLabel("left","Temperature","℃")#设置标签
    self.analyse.setLabel("bottom","Time","s")
    self.analyse.addLegend()#增加图标
    self.analyse.plot([0],pen=(0,128,0),symbolBrush=(0,128,0),  symbol='t', symbolSize=14,name="\\      开始打印")
    #第一个参数是x数据，这里没写，默认从0开始，第二个参数是Y，第三个参数的画笔颜色，第四个是笔刷颜色，第五个是符号形状，第六个是尺寸，第七个是名称，
    名称在clear()函数之后不清空
    self.analyse.clear()
    self.analyse.scene().sigMouseMoved.connect(self.mouseMoved)#绑定鼠标移动的函数
    self.current_temp = self.addPlot(row=2, col=0))#这句话代表增加绘制表格，在整个布局中占第二行
    
QProgressBar 进度条
setMinimum()
setMaximum()
setOrientation()设置方向，Qt.Horizontal和Qt.Vertical
setFormat("%v")#设置显示数字
％p - 被完成的百分比取代
％v - 被当前值替换
％m - 被总step所取代
默认值是”％p％”
setInvertedAppearance(True)，行进方向
最大最小值都设为0，则是繁忙指示


读文件新线程
PyQt5.QtCore import QThread,pyqtSignal
新建一个类，继承QThread
定义一个信号属性sinout=pyqtSignal（int）
需要运行的代码在run()函数中即可
在函数中可以使用sinout.emit()来发送信号

在别的地方使用，先将类初始化
然后绑定sinout.connect()
在需要开启线程的时候，调用start()

使用摄像头
from PyQt5.QtMultimedia import QCamera#摄像头类


from PyQt5.QtMultimediaWidgets import QCameraViewfinder#装摄像头类的Widget
cam=QCamera(self)#摄像头类
camera=QCameraViewfinder(self)#装摄像头的Widget
cam.setViewfinder(camera)
cam.start()


ToolBar使用：
self.toolBar.setIconSize(QtCore.QSize(32,32))#设置图标大小
action=QtWidgets.QAction(QtGui.QIcon('./resource/toolbar/move.ico')
action.setShortcut('Ctrl+Q')
action.triggered.connect()
self.toolBar.addAction(action,'打开文件',self))
self.toolBar.actionTriggered[QtWidgets.QAction].connect(self.toolbarpress)

addSeperator()#分组显示工具按钮
addWidget()#添加其他控件
addToolBar()#增加一个新的工具栏
setMovable()#工具栏可移动
setOrientation()#方向，分别为Qt.Horizontal  Qt.vertical

CSS使用
#QSS 选择器
#（1） 通配选择器：*，匹配所有的控件
#（2） 类型选择器：QPushButton，匹配所有的QPushButton类及其子类
#（3） 属性选择器：QPushButton[name="myBtn"]，匹配所有的name属性是myBtn的实例，该属性是自定义的
#             例：btn=QPushButton(self)
#                 btn.setProperty('name','myBtn')
#（4） 类选择器：.QPushButton，匹配所有QPushButton，但不匹配子类
#（5） ID选择器： #myButton，匹配所有ID为myButton的控件，ID指的是objectName
#（6） 后代选择器：QDialog QPushButton，匹配所有QDialog容器中包含的QPushButton，不管直接还是间接
#（7） 子选择器：QDialog>QPushButton，匹配所有QDialog容器中包含的QPushButton，其中要求QPushButton的直接父容器是QDialog
#联合使用：#a,#b,#c,表示这些ID使用一个规则；#a QPushButton，表示所有ID为a的容器中包含的QPushButton
伪类选择器
1、:checked: 按钮控件被选中
2、:unchecked:按钮控件未被选中
3、:indeterminate:对于checkBox或者redioButton部分选中(三态的时候)
4、:hover:控件被鼠标放上去
5、:pressed:控件被按下
6、:focus:控件获取焦点
7、:disabled:控件禁用
8、:enabled:控件有效的时候
9、:on:控件属于on状态
10、:off: 控件处于off状态
11、关于伪类取反的操作:!checked
12、伪类连接使用:hover:checked表示鼠标在上面且被选中
myStyle='''
        #btn_infill{
            border-image:url(resource/填充normal.png)
            }
        #btn_infill:hover{
            border-image:url(resource/填充hover.png)
            }
        #btn_infill:pressed{
            border-image:url(resource/填充click.png)
            }
            '''
            
  然后在主程序中
app.setStyleSheet(myStyle)
